<?php

namespace app\models;

use app\modules\admin\Admin;
use app\modules\admin\services\PasswordEncryption;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\helpers\VarDumper;

/**
 * This is the model class for table "passwords".
 *
 * @property int $id
 * @property string $sault Создан
 * @property string $password password
 * @property string $hash hash
 * @property int $organization_id ID организации
 * @property int $service_id ID сервиса
 * @property int|null $created_at Создан
 * @property int|null $updated_at Изменен
 * @property string|null $ip Ip
 *
 * @property GroupPassword[] $groupPasswords
 * @property Organizations $organization
 * @property Service $service
 */
class Passwords extends \yii\db\ActiveRecord
{
    /** @var int Минимальное кол-во символов в пароле */
    public const PASSWORD_MIN_CHARACTER = 6;
    /** @var int Максимальное кол-во символов в пароле */
    public const PASSWORD_MAX_CHARACTER = 64;

    /** @var array Поле группы */
    public $group_id;

    /**  @var string Пароль введенный в форме, в дальнейшем будет дешифрован */
    public $password_is_not_decrypted;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'passwords';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['password', 'hash', 'organization_id'], 'required'],
            [['sault', 'password', 'hash'], 'string', 'max' => 255],

            [['organization_id', 'created_at', 'updated_at', 'service_id'], 'integer'],
            [['ip'], 'string', 'max' => 64],

            [['organization_id'], 'exist', 'skipOnError' => true, 'targetClass' => Organizations::class, 'targetAttribute' => ['organization_id' => 'id']],
            [['service_id'], 'exist', 'skipOnError' => true, 'targetClass' => Service::class, 'targetAttribute' => ['service_id' => 'id']],


            [['group_id'], 'safe'],
            [['group_id'], 'required'],

//            [['password_is_not_decrypted'], 'required'],
            [['password_is_not_decrypted'], 'required', 'on' => 'update', 'when' => function ($model) {
                return $model->isAttributeChanged('password_is_not_decrypted');
            }],
            [['password_is_not_decrypted',], 'string', 'min' => self::PASSWORD_MIN_CHARACTER,
                'max' => self::PASSWORD_MAX_CHARACTER],
        ];

    }



    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'sault' => 'Соль',
            'password' => 'password',
            'hash' => 'hash',
            'organization_id' => 'Организация',
            'service_id' => 'Сервис',
            'created_at' => 'Создан',
            'updated_at' => 'Изменен',
            'ip' => 'Ip',
            'password_is_not_decrypted' => 'Пароль',

            //Виртуальное поле группы
            'group_id' => 'Группы'
        ];
    }

    /**
     * Автозаполнение полей создание и редактирование
     * профиля
     * @return array
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::class,
        ];
    }

//    public function afterFind(){
//        $this->oldAttributes = $this->attributes;
//        return parent::afterFind();
//    }


    public function beforeSave($insert)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * Название групп
     * @return string
     */
    public function getGroup()
    {
        $groups = GroupPassword::find()->asArray()->where(['password_id' => $this->id])->all();

        $name = '';
        foreach ($groups as $group_id) {
            $name_group = Groups::findOne(['id' => $group_id['group_id']]);
            $name .= '<span class="badge text-bg-secondary">' . $name_group->title . '</span>' . ' ';
        }
        return $name;
    }


    /**
     * Gets query for [[GroupPasswords]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getGroupPasswords()
    {
        return $this->hasMany(GroupPassword::class, ['password_id' => 'id']);
    }

    /**
     * Gets query for [[Organization]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getOrganization()
    {
        return $this->hasOne(Organizations::class, ['id' => 'organization_id']);
    }

    /**
     * Gets query for [[Service]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getService()
    {
        return $this->hasOne(Service::class, ['id' => 'service_id']);
    }

}
